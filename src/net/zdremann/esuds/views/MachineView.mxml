<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
        xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		title="{machineList.selectedItem.type == ClothesMachine.WASHER?'Washer':'Dryer'} {machineList.selectedItem.number}"
		viewActivate="refresh()" creationComplete="init();" width="100%" height="100%" backgroundColor="0x222222">
	<fx:Script>
		<![CDATA[
		import flash.events.Event;
		import flash.events.KeyboardEvent;
		import flash.system.Capabilities;
		import mx.collections.ArrayCollection;
		import mx.managers.PopUpManager;
		import net.zdremann.esuds.ClothesMachine;
		import spark.collections.SortField;
		import spark.transitions.SlideViewTransition;
		import spark.managers.PersistenceManager;
		import mx.core.FlexGlobals;
		import flash.net.URLVariables;
		import flash.events.MouseEvent;
		
		private var dragStart:Object = { x:0, y:0 };
		
		public var xml:XML;
		
		[Bindable]
		public var machineListData:ArrayCollection = new ArrayCollection();
		public function init():void
		{
			if(Capabilities.version.indexOf("AND")==0)
				this.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown_Handler);
		}
		
		private function onKeyDown_Handler(e:KeyboardEvent):void 
		{
			switch(e.keyCode)
			{
			case Keyboard.BACK:
				navigator.popToFirstView();
				break;
			}
		}
		
		public function refresh():void
		{
			var loader:flash.net.URLLoader = new URLLoader();
			loader.addEventListener(Event.COMPLETE, loaderCompleate_Handler);
			loader.load(new URLRequest("http://stevenson.esuds.net/RoomStatus/machineStatus.i?bottomLocationId="+ FlexGlobals.topLevelApplication.persistenceManager.getProperty("room").roomId));
		}
		private function loaderCompleate_Handler(e:Event):void
		{
			var txt:String = e.target.data;
			var reg:RegExp = new RegExp("xmlns=\".*\"");
			txt = txt.replace(reg, "");
			reg = new RegExp("<script.*</script>", "gis");
			txt = txt.replace(reg, "");
			xml = new XML(txt);
			
			var att:XMLList = new XMLList();
			
			var washers:Array = new Array();
			var dryers:Array = new Array();
			
			var machine:ClothesMachine;
			for each(var tr:XML in xml.tr)
			{
				if (tr.attributes().length() != 0 && (tr.attribute("class")=="even" || tr.attribute("class")=="odd"))
				{
					machine = new ClothesMachine();
					// Set machine id
					if (tr.td[0].input.length() == 1)
					{
						machine.id = tr.td[0].input[0].@value;
					}
					//set machine number
					machine.number = tr.td[1].text();
					//set machine status
					if (tr.td[3].font[0].text() == "In Use")
						machine.status = ClothesMachine.IN_USE;
					else if (tr.td[3].font[0].text() == "Available")
						machine.status = ClothesMachine.AVAILABLE;
					else if (tr.td[3].font[0].text() == "Cycle Complete")
						machine.status = ClothesMachine.CYCLE_COMPLETE;
					else if (tr.td[3].font[0].text() == "Unavailable")
						machine.status = ClothesMachine.UNAVAILABLE;
					
				
					// set machine time remaining
					if (tr.td[4].text() != "&nbsp;")
					{
						machine.timeRemaining = tr.td[4].text();
					}
					
					//Set machine type
					if ((tr.td[2].text().toString() as String).indexOf("Washer") != -1)
					{
						machine.type = ClothesMachine.WASHER;
						washers.push(machine);
					}
					else if ((tr.td[2].text().toString() as String).indexOf("Dryer") != -1)
					{
						machine.type = ClothesMachine.DRYER;
						dryers.push(machine);
					}
				}
			}
			// Will now have a list of all washers and dryers
			washers.sortOn(["status", "timeRemaining","number"], Array.NUMERIC);
			dryers.sortOn(["status", "timeRemaining","number"], Array.NUMERIC);
			
			// Combine lists, and add Headers
			var a:Array = washers.concat({header:true, label:"Dryers"}, dryers);
			a.unshift( { header:true, label:"Washers" } );
			FlexGlobals.topLevelApplication.persistenceManager.setProperty("machineListData", a);
			this.data = a;
			this.machineListData = new ArrayCollection(a);
			this.machineListData.filterFunction = removeHeaders_Filter;
			this.machineListData.refresh();
		}
		
		private static function removeHeaders_Filter(item:Object):Boolean
		{
			if (item.hasOwnProperty("header") && item.header == true)
				return false;
			else
				return true;
		}
		private function machineListMouseUp_Handler(event:MouseEvent):void
		{
			
		}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:List id="machineList" dataProvider="{machineListData}" itemRenderer="net.zdremann.esuds.CardMachineItemRenderer" width="100%" height="100%" mouseUp="machineListMouseUp_Handler(event)">
		<s:layout>
			<s:VerticalLayout id="machineLayout" gap="0" variableRowHeight="false" rowHeight="{this.height}" />
		</s:layout>
	</s:List>
</s:View>