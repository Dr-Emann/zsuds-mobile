<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
        xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:esuds="net.zdremann.esuds.*"
		title="{machineList.selectedItem.type == ClothesMachine.WASHER?'Washer':'Dryer'} {machineList.selectedItem.number}"
		actionBarVisible="{(this.parentApplication as ViewNavigatorApplication).height>400}"
		creationComplete="init();" width="100%" height="100%" resize="onResize(event)" gestureSwipe="swipeHandler(event);" deactivate="onDeactivate();">
	<fx:Script>
		<![CDATA[
		import spark.components.ViewNavigatorApplication;
		import com.greensock.data.TweenLiteVars;
		import com.greensock.TweenLite;
		import flash.events.Event;
		import flash.events.KeyboardEvent;
		import flash.events.MouseEvent;
		import flash.events.TouchEvent;
		import flash.events.TransformGestureEvent;
		import flash.net.URLVariables;
		import flash.system.Capabilities;
		import mx.collections.ArrayCollection;
		import mx.core.FlexGlobals;
		import mx.events.ResizeEvent;
		import mx.events.TouchInteractionEvent;
		import mx.managers.PopUpManager;
		import net.zdremann.esuds.ClothesMachine;
		import spark.collections.SortField;
		import spark.components.ViewNavigator;
		import spark.layouts.VerticalLayout;
		import spark.managers.PersistenceManager;
		import spark.transitions.SlideViewTransition;
		
		public var xml:XML;
		
		private var dragStart:Object = { x:0, y:0, scrollPos:0 };
		private var prevPos:Array = [{ x:0, y:0, scrollPos:0 }];
		
		override public function createReturnObject():Object 
		{
			return this.data;
		}
		
		[Bindable]
		public var machineListData:ArrayCollection = new ArrayCollection();
		public function init():void
		{
			//machineList.addEventListener(MouseEvent.MOUSE_UP, machineListTouchInteractionEnd_Handler);
			if(Capabilities.version.indexOf("AND")==0)
				this.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown_Handler);
			
			var arrLength:int = machineListData.length;
			
			if (navigator.context && navigator.context.hasOwnProperty("number"))
			{
				var curMachineNum:int = navigator.context.number;
				for (var i:int = 0; i < arrLength; i ++)
				{
					if (machineListData.getItemAt(i).hasOwnProperty("number") && machineListData.getItemAt(i).number == curMachineNum)
					{
						callLater(scrollTo, [i,0]);
						//machineList.scroller.viewport.verticalScrollPosition 
					}
				}
			}
			else
			{
				callLater(scrollTo, [0, 0]);
			}
		}
		
		private function onKeyDown_Handler(e:KeyboardEvent):void 
		{
			switch(e.keyCode)
			{
			case Keyboard.BACK:
				back();
				break;
			}
		}
		
		public function back():void
		{
			navigator.popView();
		}
		
		public function onDeactivate():void
		{
			this.addEventListener(Event.ACTIVATE, onReActivate, false, 0, true);
		}
		private function onReActivate(event:Event = null):void
		{
			this.removeEventListener(Event.ACTIVATE, onReActivate);
			refresh();
		}
		
		public function refresh():void
		{
			var loader:flash.net.URLLoader = new URLLoader();
			loader.addEventListener(Event.COMPLETE, loaderCompleate_Handler);
			loader.load(new URLRequest("http://stevenson.esuds.net/RoomStatus/machineStatus.i?bottomLocationId="+ FlexGlobals.topLevelApplication.persistenceManager.getProperty("room").roomId));
		}
		private function loaderCompleate_Handler(e:Event):void
		{
			var scrollToIndex:int = machineList.selectedIndex;
			
			var txt:String = e.target.data;
			var reg:RegExp = new RegExp("xmlns=\".*\"");
			txt = txt.replace(reg, "");
			reg = new RegExp("<script.*</script>", "gis");
			txt = txt.replace(reg, "");
			xml = new XML(txt);
			
			var att:XMLList = new XMLList();
			
			var washers:Array = new Array();
			var dryers:Array = new Array();
			
			var machine:ClothesMachine;
			for each(var tr:XML in xml.tr)
			{
				if (tr.attributes().length() != 0 && (tr.attribute("class")=="even" || tr.attribute("class")=="odd"))
				{
					machine = new ClothesMachine();
					// Set machine id
					if (tr.td[0].input.length() == 1)
					{
						machine.id = tr.td[0].input[0].@value;
					}
					//set machine number
					machine.number = tr.td[1].text();
					//set machine status
					if (tr.td[3].font[0].text() == "In Use")
						machine.status = ClothesMachine.IN_USE;
					else if (tr.td[3].font[0].text() == "Available")
						machine.status = ClothesMachine.AVAILABLE;
					else if (tr.td[3].font[0].text() == "Cycle Complete")
						machine.status = ClothesMachine.CYCLE_COMPLETE;
					else if (tr.td[3].font[0].text() == "Unavailable")
						machine.status = ClothesMachine.UNAVAILABLE;
					
				
					// set machine time remaining
					if (tr.td[4].text() != "&nbsp;")
					{
						machine.timeRemaining = tr.td[4].text();
					}
					
					//Set machine type
					if ((tr.td[2].text().toString() as String).indexOf("Washer") != -1)
					{
						machine.type = ClothesMachine.WASHER;
						washers.push(machine);
					}
					else if ((tr.td[2].text().toString() as String).indexOf("Dryer") != -1)
					{
						machine.type = ClothesMachine.DRYER;
						dryers.push(machine);
					}
				}
			}
			// Will now have a list of all washers and dryers
			washers.sortOn(["status", "timeRemaining","number"], Array.NUMERIC);
			dryers.sortOn(["status", "timeRemaining","number"], Array.NUMERIC);
			
			// Combine lists, and add Headers
			var a:Array = washers.concat({header:true, label:"Dryers"}, dryers);
			a.unshift( { header:true, label:"Washers" } );
			this.data = a;
			
			callLater(this.scrollTo, [scrollToIndex, 0]);
		}
		
		override public function set data(value:Object):void 
		{
			super.data = value;
			this.machineListData = new ArrayCollection(value as Array);
			this.machineListData.filterFunction = removeHeaders_Filter;
			this.machineListData.refresh();
		}
		
		private function scrollTo(pos:int, time:Number = 0):void
		{
			if (time == 0)
			{
				(machineList.layout as VerticalLayout).verticalScrollPosition = pos * this.height;
			}
			else
				TweenLite.to(machineList.layout, time, { verticalScrollPosition: pos * this.height,
					onComplete:function():void { stage.frameRate = 10; },
					onStart:function():void { stage.frameRate = 60; } } );
			
			callLater(function():void { machineList.selectedIndex = pos; } );
			//this.machineList.layout.me = this.height * index;
			//this.machineList.scroller.viewport.verticalScrollPosition = this.height * index;
		}
		
		private static function removeHeaders_Filter(item:Object):Boolean
		{
			if (item.hasOwnProperty("header") && item.header == true)
				return false;
			else
				return true;
		}
		private function machineListTouchInteractionStarting_Handler(event:TouchInteractionEvent):void
		{
			event.preventDefault();
			event.stopImmediatePropagation();
			
			machineList.mouseChildren = false;
			
			stage.frameRate = 60;
			
			prevPos = [ { x:stage.mouseX, y:stage.mouseY, scrollPos:machineList.layout.verticalScrollPosition },
			{ x:stage.mouseX, y:stage.mouseY, scrollPos:machineList.layout.verticalScrollPosition },
			{ x:stage.mouseX, y:stage.mouseY, scrollPos:machineList.layout.verticalScrollPosition },
			{ x:stage.mouseX, y:stage.mouseY, scrollPos:machineList.layout.verticalScrollPosition }];
			dragStart = { x:stage.mouseX, y:stage.mouseY, scrollPos:machineList.layout.verticalScrollPosition };
			
			stage.addEventListener(MouseEvent.MOUSE_MOVE, dragging);
			
			stage.addEventListener(MouseEvent.MOUSE_UP, endDrag);
			stage.addEventListener(Event.MOUSE_LEAVE, endDrag);
			FlexGlobals.topLevelApplication.addEventListener(Event.DEACTIVATE, endDrag);
		}
		
		private function dragging(e:MouseEvent):void 
		{
			if (stage.mouseY<=0 || stage.mouseY>=stage.stageHeight)
			{
				endDrag(null);
				return;
			}
			
			if(Math.abs (dragStart.y - stage.mouseY) > 10)
				machineList.layout.verticalScrollPosition = dragStart.y - stage.mouseY + dragStart.scrollPos;
				
			this.prevPos.push( { x:stage.mouseX, y:stage.mouseY, scrollPos:machineList.layout.verticalScrollPosition } );
			this.prevPos.shift();
		}
		
		private function endDrag(e:Event):void 
		{
			machineList.mouseChildren = true;
			
			stage.removeEventListener(MouseEvent.MOUSE_MOVE, dragging);
			stage.removeEventListener(MouseEvent.MOUSE_UP, endDrag);
			stage.removeEventListener(Event.MOUSE_LEAVE, endDrag);
			FlexGlobals.topLevelApplication.removeEventListener(Event.DEACTIVATE, endDrag);
			
			var unroundedScrollPos:Number = dragStart.y - prevPos[prevPos.length-2].y + dragStart.scrollPos;
			if (prevPos[0].y - stage.mouseY > 0)
				unroundedScrollPos += Math.min(15 * (prevPos[0].y - stage.mouseY), .5* this.height);
			else
				unroundedScrollPos += Math.max(15 * (prevPos[0].y - stage.mouseY), .5* -this.height);
			
			var roundedScrollIndex:Number = Math.round(unroundedScrollPos / this.height);
			if (roundedScrollIndex > machineListData.length -1)
				roundedScrollIndex = machineListData.length -1;
			else if (roundedScrollIndex < 0)
				roundedScrollIndex = 0;
			
			scrollTo(roundedScrollIndex, .4);
		}
		private function onResize(event:ResizeEvent):void
		{
			var proportion:Number = this.height / event.oldHeight;
			
			machineListLayout.clearVirtualLayoutCache();
			machineListLayout.typicalLayoutElement = this.machineList;
			
			var arrLength:int = prevPos.length;
			dragStart.scrollPos *= proportion;
			for (var i:int = 0; i < arrLength; i++)
			{
				prevPos[i].scrollPos *= proportion;
			}
			
			callLater(scrollTo,[machineList.selectedIndex]);
		}
		private function swipeHandler(event:TransformGestureEvent):void
		{
			if (event.offsetX == 1)
				navigator.popView();
		}
		
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:List id="machineList" dataProvider="{machineListData}" itemRenderer="net.zdremann.esuds.CardMachineItemRenderer"
			width="100%" height="100%" useVirtualLayout="true"
			touchInteractionStarting="machineListTouchInteractionStarting_Handler(event)">
			
		<s:typicalItem>
			<esuds:ClothesMachine number="10" status="{ClothesMachine.IN_USE}" timeRemaining="60" type="{ClothesMachine.WASHER}" />
		</s:typicalItem>
		<s:layout>
			<s:VerticalLayout id="machineListLayout" gap="0" paddingTop="0" paddingBottom="0" variableRowHeight="false" rowHeight="{this.height}" requestedRowCount="1" />
		</s:layout>
	</s:List>
</s:View>