<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

     @see spark.components.SkinnableContainer
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5">

    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.SkinnableContainer")]
    ]]>
    </fx:Metadata> 
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            
			
			/**
			* Scales r-g-b channels by 'scale' factor, having the r-g-b proportions saved
			* @param	color:uint		color to be scaled (i.e. lighten or darken)
			* @param	scale:Number	the scale factor (values -1 to 1) -1 = absolute dark; 1 = absolute light;
			* @return	uint			scaled color
			*/
			private function scaleColor(color:uint, scale:Number):uint
			{
				var r:int = (color & 0xFF0000) >> 16;
				var g:int = (color & 0x00FF00) >> 8;
				var b:int = color & 0x0000FF;
				r += (255 * scale)*(r/(r+g+b)); r = (r > 255) ? 255 : r; r = (r < 0) ? 0 : r;
				g += (255 * scale)*(g/(r+g+b)); g = (g > 255) ? 255 : g; g = (g < 0) ? 0 : g;
				b += (255 * scale)*(b/(r+g+b)); b = (b > 255) ? 255 : b; b = (b < 0) ? 0 : b;
				return (r << 16 & 0xff0000) + (g << 8 & 0x00ff00) + (b & 0x0000ff);
			}
			/**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                // Push backgroundColor and backgroundAlpha directly.
                // Handle undefined backgroundColor by hiding the background object.
                if (isNaN(getStyle("backgroundColor")))
                {
                    background.visible = false;
                }
                else
                {
                    background.visible = true;
                    topGrad.color = getStyle("backgroundColor");
					bottomGrad.color = scaleColor(topGrad.color, .25);
                    topGrad.alpha = getStyle("backgroundAlpha");
					bottomGrad.alpha = getStyle("backgroundAlpha");
                }
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        ]]>        
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
    
    <!--- Defines the appearance of the SkinnableContainer class's background. -->
    <s:Rect id="background" left="0" right="0" top="0" bottom="0" radiusX="50" radiusY="50">
        <s:fill>
            <!--- @private -->
			<s:LinearGradient rotation="270" id="bgFill">
				<s:GradientEntry id="topGrad" ratio="0" color="0xffffff" />
				<s:GradientEntry id="bottomGrad" ratio="1" color="0xffffff" />
			</s:LinearGradient>
        </s:fill>
    </s:Rect>
    
    <!--
        Note: setting the minimum size to 0 here so that changes to the host component's
        size will not be thwarted by this skin part's minimum size.   This is a compromise,
        more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
    -->
    <!--- @copy spark.components.SkinnableContainer#contentGroup -->
    <s:Group id="contentGroup" left="40" right="40" top="40" bottom="40" minWidth="0" minHeight="0">
        <s:layout>
            <s:BasicLayout/>
        </s:layout>
    </s:Group>

</s:Skin>
